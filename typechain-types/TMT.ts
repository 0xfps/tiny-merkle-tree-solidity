/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TMTInterface extends Interface {
  getFunction(
    nameOrSignature: "addLeaf" | "last32Roots" | "root"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LeafAdded"): EventFragment;

  encodeFunctionData(functionFragment: "addLeaf", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "last32Roots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addLeaf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "last32Roots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
}

export namespace LeafAddedEvent {
  export type InputTuple = [leaf: BytesLike];
  export type OutputTuple = [leaf: string];
  export interface OutputObject {
    leaf: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TMT extends BaseContract {
  connect(runner?: ContractRunner | null): TMT;
  waitForDeployment(): Promise<this>;

  interface: TMTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLeaf: TypedContractMethod<[s: BytesLike], [void], "nonpayable">;

  last32Roots: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  root: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLeaf"
  ): TypedContractMethod<[s: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "last32Roots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "root"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LeafAdded"
  ): TypedContractEvent<
    LeafAddedEvent.InputTuple,
    LeafAddedEvent.OutputTuple,
    LeafAddedEvent.OutputObject
  >;

  filters: {
    "LeafAdded(bytes32)": TypedContractEvent<
      LeafAddedEvent.InputTuple,
      LeafAddedEvent.OutputTuple,
      LeafAddedEvent.OutputObject
    >;
    LeafAdded: TypedContractEvent<
      LeafAddedEvent.InputTuple,
      LeafAddedEvent.OutputTuple,
      LeafAddedEvent.OutputObject
    >;
  };
}
